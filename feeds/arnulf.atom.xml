<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>&gt; /dev/null 2&gt;&amp;1 - arnulf</title><link href="http://blog.heimsbakk.net/" rel="alternate"></link><link href="http://blog.heimsbakk.net/feeds/arnulf.atom.xml" rel="self"></link><id>http://blog.heimsbakk.net/</id><updated>2019-09-11T00:00:00+02:00</updated><subtitle></subtitle><entry><title>Design an online ransomware safe backup with restic</title><link href="http://blog.heimsbakk.net/posts/2019/2019-09-11-restic.html" rel="alternate"></link><published>2019-09-11T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2019-09-11:/posts/2019/2019-09-11-restic.html/</id><summary type="html">&lt;p&gt;The only way to be safe for &lt;a href="https://en.wikipedia.org/wiki/Ransomware" title="Ransomware is a type of malicious software from cryptovirology that threatens to publish the victim's data or perpetually block access to it unless a ransom is paid."&gt;ransomware&lt;/a&gt;, except for keeping a offline backup, is to have a &lt;a href="https://en.wikipedia.org/wiki/Immutable_object" title="An immutable object is an object whose state cannot be modified after it is created."&gt;immutable&lt;/a&gt; online backup.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://restic.net" title="Backups done right!"&gt;restic&lt;/a&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Data_deduplication" title="In computing, data deduplication is a specialized data compression technique for eliminating duplicate copies of repeating data. Related and somewhat synonymous terms are intelligent compression and single-instance storage."&gt;deduplication&lt;/a&gt; backup sofware, designed for ease of use and security. &lt;a href="https://rclone.org" title="Rclone - rsync for cloud storage."&gt;Rclone&lt;/a&gt; is a versatile program for syncing data between a huge variety of protocols and cloud providers. What is especially nifty is that &lt;em&gt;restic&lt;/em&gt; can use &lt;em&gt;rclone&lt;/em&gt; as a backend, and by that extend &lt;em&gt;restic&lt;/em&gt; destination into most cloud providers. &lt;/p&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Setting up an automated backup from one macine is no problem. This can be done quite easily with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;restic -p password_file -r sftp://user@destination/srv/backups init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Backups is then done with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;restic -p password_file -r sftp://user@destination/srv/backups backup /srv/backmeup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a malicious actor has access to the source machine, they will have read and write access to the backup on the destination. To avoid giving the malicious actor write access to already existing backups, we need to ensure that existing backups on the destination never is changed. This is done by making the destination immutable. When data is written, it cannot be changed later.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;This can be solved in couple of ways&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a immutable backend, in example immutable object storage in the cloud.&lt;/li&gt;
&lt;li&gt;Make any destination immutable by relying all traffic through a secured &lt;em&gt;rclone&lt;/em&gt; proxy with the &lt;code&gt;--append-only&lt;/code&gt; forced.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Design, rely traffic through proxy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     source               intermediate                destination
+---------------+       +--------------+  chosen     +-----------+
|               |  SSH  | rclone       |  transport  | favorite  |
| /srv/backmeup | ----&amp;gt; | append only  | ----------&amp;gt; | cloud     |
|               |       | rely         |             | storage   |
+---------------+       +--------------+             +-----------+
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure&lt;/h2&gt;
&lt;h3&gt;On &lt;em&gt;source&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a SSH key …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="howto"></category><category term="restic"></category><category term="rclone"></category><category term="security"></category><category term="ssh"></category></entry><entry><title>SSH with YubiKey NEO on Fedora made easy</title><link href="http://blog.heimsbakk.net/posts/2018/2018-01-05-yubikey.html" rel="alternate"></link><published>2018-12-13T00:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2018-12-13:/posts/2018/2018-01-05-yubikey.html/</id><summary type="html">&lt;p&gt;Your private SSH key is the key for the kingdom. This means always having a password on the key. With &lt;a href="https://www.yubico.com/"&gt;YubiKey&lt;/a&gt;, you can keep your secret key outside your machine too.   &lt;/p&gt;
&lt;p&gt;Excerpt from Wikipedia: &lt;em&gt;The &lt;a href="https://www.yubico.com/"&gt;YubiKey&lt;/a&gt; allows users to sign, encrypt and decrypt messages without exposing the private keys to the outside world.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a short &lt;a href="https://en.wikipedia.org/wiki/How-to"&gt;how-to&lt;/a&gt; to get startet with using Yubikey to SSH into your servers.&lt;/p&gt;
&lt;h2&gt;YubiKey as private SSH key&lt;/h2&gt;
&lt;h3&gt;Pre requests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the YubiKey management software. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install yubikey-manager
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert YubiKey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check that OpenPGP is enabled on your YubiKey.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ykman info
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Expected output should include the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    OPGP:      Enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you get an error, &lt;strong&gt;restart&lt;/strong&gt; your computer and goto 2. Yes, I know this is Linux, but we're just doing it the easy way. It should work the second time around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set preferred number of retries when entering PIN on YubiKey. Default is 3 for user pin, 3 for unlock user pin (reset), 3 for admin pin. In the example admin retries is increased to 5.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ykman openpgp set-pin-retries 3 3 5
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Generate OpenPGP key on YubiKey&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;gpg2&lt;/code&gt; for the rest.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate PGP certificate on the key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg2 --edit-card
gpg/card&amp;gt; admin
gpg/card&amp;gt; generate
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally set &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;lang&lt;/code&gt; and &lt;code&gt;sex&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the  password menu.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg/card&amp;gt; passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change user PIN, menu &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change admin PIN, menu &lt;code&gt;3&lt;/code&gt;. The easiest is to keep to numbers to avoid accidentally locking you YubiKey. If that happens you need to reset it with …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="howto"></category><category term="security"></category><category term="ssh"></category><category term="yubikey"></category></entry><entry><title>zram: Compressed RAM based block devices</title><link href="http://blog.heimsbakk.net/posts/2015/zram.html" rel="alternate"></link><published>2015-01-11T00:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2015-01-11:/posts/2015/zram.html/</id><summary type="html">&lt;p&gt;From &lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/blockdev/zram.txt"&gt;zram&lt;/a&gt; documentation: &lt;em&gt;The zram module creates RAM based block devices named /dev/zram&amp;lt;id&amp;gt; (&amp;lt;id&amp;gt; = 0, 1, ...). Pages written to these disks are compressed and stored in memory itself. These disks allow very fast I/O and compression provides good amounts of memory savings. Some of the usecases include /tmp storage, use as swap disks, various caches under /var and maybe many more :)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/blockdev/zram.txt"&gt;zram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="example-of-compressed-swap-in-memory"&gt;
&lt;h2&gt;Example of compressed swap in memory&lt;/h2&gt;
&lt;p&gt;Write this commands in &lt;code&gt;/etc/rc.local&lt;/code&gt; to create a 2G compressed swap partition in memory.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Load the module and create one zram device, /dev/zram0&lt;/span&gt;
modprobe zram &lt;span class="nv"&gt;num_devices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Maximum of compressed streams (keep same as CPUs)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &amp;gt; /sys/devices/virtual/block/zram0/max_comp_streams

&lt;span class="c1"&gt;# Size of zram0 device in k/m/g&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; 2g &amp;gt; /sys/devices/virtual/block/zram0/disksize

&lt;span class="c1"&gt;# Comression compression algorithm to use&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; lzo &amp;gt; /sys/devices/virtual/block/zram0/comp_algorithm

&lt;span class="c1"&gt;# Create the swap file system&lt;/span&gt;
mkswap /dev/zram0

&lt;span class="c1"&gt;# Enable the swap partition with high priority&lt;/span&gt;
swapon /dev/zram0 -p &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;!-- # vim: set spell spl=en: --&gt;
&lt;/div&gt;
</summary><category term="howto"></category><category term="kernel"></category><category term="zram"></category></entry><entry><title>Record a PulseAudio sound stream</title><link href="http://blog.heimsbakk.net/posts/2015/2015-01-10-pa.html" rel="alternate"></link><published>2015-01-10T00:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2015-01-10:/posts/2015/2015-01-10-pa.html/</id><summary type="html">&lt;p&gt;Ever wondered on how to record the audio from one application? Either the browser or a streaming application that don't have the option to save audio to a file.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/PulseAudio"&gt;PulseAudio&lt;/a&gt; sound server in your desktop makes this quite easy.&lt;/p&gt;
&lt;p&gt;I've created a small script that captures the current playing sound stream and redirects it to &lt;a href="https://en.wikipedia.org/wiki/Flac" title="Free Lossless Audio Codec"&gt;FLAC&lt;/a&gt; audio file. After the capture is started, you can start playing sound from other programs. It won't interfere with the current capture.&lt;/p&gt;
&lt;h2&gt;Capture audio&lt;/h2&gt;
&lt;h3&gt;Pre requests&lt;/h3&gt;
&lt;p&gt;You have to install a couple of programs, if you don't have them from before, to make the bash script work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install pulseaudio-utils flac coreutils
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The script&lt;/h3&gt;
&lt;p&gt;This is my &lt;code&gt;record-app.sh&lt;/code&gt; script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;BN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pacmd list-sink-inputs &lt;span class="p"&gt;|&lt;/span&gt; grep -m &lt;span class="m"&gt;1&lt;/span&gt; index &lt;span class="p"&gt;|&lt;/span&gt; egrep -o &lt;span class="s2"&gt;&amp;quot;[[:digit:]]+&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usage: &lt;/span&gt;&lt;span class="nv"&gt;$BN&lt;/span&gt;&lt;span class="s2"&gt; filename&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SI&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error: no input sinks found&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$BN&lt;/span&gt; recording:
&lt;span class="nb"&gt;echo&lt;/span&gt; · Found sink index «&lt;span class="nv"&gt;$SI&lt;/span&gt;»
&lt;span class="nb"&gt;echo&lt;/span&gt; · Loading module-null-sink
&lt;span class="nv"&gt;MI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pactl load-module module-null-sink &lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rec&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{ echo · Trying to delete null sink «rec»; pactl unload-module &lt;/span&gt;&lt;span class="nv"&gt;$MI&lt;/span&gt;&lt;span class="s2"&gt;; }&amp;quot;&lt;/span&gt; EXIT
&lt;span class="nb"&gt;echo&lt;/span&gt; · Moving sink «&lt;span class="nv"&gt;$SI&lt;/span&gt;» to null sink «rec»
pactl move-sink-input &lt;span class="nv"&gt;$SI&lt;/span&gt; rec
&lt;span class="nb"&gt;echo&lt;/span&gt; · Saving sound data to «&lt;span class="nv"&gt;$N&lt;/span&gt;.flac» 
parec -d rec.monitor &lt;span class="p"&gt;|&lt;/span&gt; flac --endian&lt;span class="o"&gt;=&lt;/span&gt;little --sign&lt;span class="o"&gt;=&lt;/span&gt;signed --channels&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --bps&lt;span class="o"&gt;=&lt;/span&gt;16n --sample-rate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44100&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.flac&amp;quot;&lt;/span&gt; - &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usage: record-app.sh filename
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Example 1&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./record-app.sh firefox-sound
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Will start to record the current playing audio in Firefox. The audio is saved int …&lt;/p&gt;</summary><category term="howto"></category><category term="pulseaudio"></category><category term="sound"></category></entry><entry><title>Vagrant with OpenStack</title><link href="http://blog.heimsbakk.net/posts/2014/2014-12-15-vagrant-openstack.html" rel="alternate"></link><published>2014-12-18T00:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-12-18:/posts/2014/2014-12-15-vagrant-openstack.html/</id><summary type="html">&lt;p&gt;If you want to use &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; with &lt;a href="http://www.openstack.org"&gt;OpenStack&lt;/a&gt;, you need to prepare &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; with installing the &lt;a href="https://github.com/cloudbau/vagrant-openstack-plugin"&gt;vagrant-openstack-plugin&lt;/a&gt;. I had some problems installing it directly through &lt;code&gt;vagrant plugin install&lt;/code&gt;. I had to clone it from &lt;a href="https://github.com"&gt;Github&lt;/a&gt; and install it manually. &lt;/p&gt;
&lt;h2&gt;One time configuration&lt;/h2&gt;
&lt;h3&gt;Install OpenStack plugin in Vagrant&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone https://github.com/cloudbau/vagrant-openstack-plugin
&lt;span class="nb"&gt;cd&lt;/span&gt; vagrant-openstack-plugin
gem build vagrant-openstack-plugin.gemspec
vagrant plugin install vagrant-openstack-plugin-*.gem
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add a dummy box to &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; thats needed by the plugin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add dummy https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Download OpenStack RC file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Log into OpenStack&lt;/li&gt;
&lt;li&gt;Download OpenStack API RC file&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Project&lt;/code&gt; -&amp;gt; &lt;code&gt;Compute&lt;/code&gt; -&amp;gt; &lt;code&gt;Access &amp;amp; Security&lt;/code&gt; -&amp;gt; &lt;code&gt;API Access&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Down RC file by hitting &lt;code&gt;Download OpenStack RC File&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put &lt;code&gt;$USER-openrc.sh&lt;/code&gt; in your &lt;code&gt;~/&lt;/code&gt; or somewhere you prefer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Configure a Vagrant VM&lt;/h2&gt;
&lt;h3&gt;Vagrantfile&lt;/h3&gt;
&lt;p&gt;This is a default generic Vagrant file which starts a &lt;code&gt;m1.tiny&lt;/code&gt; flavor image of Ubuntu Utopic. It requires that you already have added your ssh key to OpenStack. Please add your ssh key with the name &lt;code&gt;$USER_ssh_key&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vagrant-openstack-plugin&amp;#39;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synced_folder&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rsync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;rsync__exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.git/&amp;quot;&lt;/span&gt;

  &lt;span class="c1"&gt;# Make sure the private key from the key pair is provided&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;private_key_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/.ssh/id_rsa&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:openstack&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/m1.tiny/&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ubuntu CI utopic 2014-09-18&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_AUTH_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tokens&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keypair_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_ssh_key&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# The tenant have two networks, so …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="howto"></category><category term="openstack"></category><category term="vagrant"></category></entry><entry><title>fio - flexible I/O tester</title><link href="http://blog.heimsbakk.net/posts/2014/2014-12-15-fio.html" rel="alternate"></link><published>2014-12-15T00:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-12-15:/posts/2014/2014-12-15-fio.html/</id><summary type="html">&lt;p&gt;From man page: &lt;code&gt;fio&lt;/code&gt; &lt;em&gt;is a tool that will spawn a number of threads or processes doing a particular type of I/O action as specified by the user. The typical use of fio is to write a job file matching the I/O load one wants to simulate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This example only show how to use &lt;code&gt;fio&lt;/code&gt; to make reproduceable test on a file system. For me it's been useful to catch changes in I/O throughput before and after a system has gone into production. Buy running the same tests on all systems the numbers are comparable. &lt;/p&gt;
&lt;p&gt;All parameter numbers are examples, define your own test according to what you want to measure. &lt;/p&gt;
&lt;h2&gt;Installing fio&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install fio
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running fio&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;bsrange&lt;/code&gt; to the block size range you want to test. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;numjobs&lt;/code&gt; is the number of simultanious read/write threads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; is the working file size.&lt;/li&gt;
&lt;li&gt;If you want to test a read heavy load, use &lt;code&gt;rwmixread&lt;/code&gt; with a percentage of reads versus writes..&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="nb"&gt;read&lt;/span&gt; write readwrite randread randwrite randrw&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; fio --name&lt;span class="o"&gt;=&lt;/span&gt;fio  --write_bw_log&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; --write_iops_log&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; --write_lat_log&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; --ioengine&lt;span class="o"&gt;=&lt;/span&gt;sync --size&lt;span class="o"&gt;=&lt;/span&gt;10G --runtime&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt; --rw&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; --norandommap --refill_buffers --randrepeat&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  --iodepth&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --direct&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --numjobs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; --group_reporting --bsrange&lt;span class="o"&gt;=&lt;/span&gt;4k-4k&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generating I/O plots&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fio2gnuplot -i -g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For me is the most interesting plot is &lt;strong&gt;compare-result-2Dsmooth.png&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Generating bandwidth plots&lt;/h2&gt;
&lt;p&gt;Testing bandwidth is better to do with a larger block size. I usually set a block size between 64k to 1m. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in …&lt;/pre&gt;&lt;/div&gt;</summary><category term="io"></category><category term="benchmark"></category><category term="howto"></category></entry><entry><title>Power saving on laptop</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-powersave.html" rel="alternate"></link><published>2014-12-14T20:00:00+01:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-12-14:/posts/2014/2014-04-13-powersave.html/</id><summary type="html">&lt;p&gt;Notes for power saving on my i5 laptop.&lt;/p&gt;
&lt;h2&gt;/etc/rc.local&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#  SATA power save&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; medium_power &lt;span class="p"&gt;|&lt;/span&gt; tee /sys/class/scsi_host/host*/link_power_management_policy &amp;gt; /dev/null

&lt;span class="c1"&gt;# Set minimum performance to 30% of CPU MHz &lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt; /sys/devices/system/cpu/intel_pstate/min_perf_pct

&lt;span class="c1"&gt;# Set CPU governor to power save since we run on a laptop&lt;/span&gt;
&lt;span class="c1"&gt;# Valid values: powersave performance&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; powersave &lt;span class="p"&gt;|&lt;/span&gt; tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor &amp;gt; /dev/null

&lt;span class="c1"&gt;# Increase for CrashPlan so unlocking gnome-shell lock screen works&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1048576&lt;/span&gt; &amp;gt; /proc/sys/fs/inotify/max_user_watches
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;/etc/default/grub&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Make my back light buttons work correctly&lt;/span&gt;
&lt;span class="c1"&gt;# Full power save for GPU&lt;/span&gt;
&lt;span class="nv"&gt;GRUB_CMDLINE_LINUX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video.use_native_backlight=1 i915.enable_rc6=7 i915.enable_fbc=1 i915.lvds_downclock=1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;vim: set spell spl=en syn=markdown:&lt;/h6&gt;</summary><category term="i915"></category><category term="intel"></category><category term="pstate"></category><category term="grub"></category></entry><entry><title>View Google Earth in the browser</title><link href="http://blog.heimsbakk.net/posts/2014/2014-06-19-webgl.html" rel="alternate"></link><published>2014-06-19T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-06-19:/posts/2014/2014-06-19-webgl.html/</id><summary type="html">&lt;p&gt;Google now supports Google Earth in Google Maps. As far as I know it works in &lt;a href="https://en.wikipedia.org/wiki/Google_Chrome"&gt;Chrome&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Chromium_%28web_browser%29"&gt;Chromium&lt;/a&gt;. If Google Earth isn't available where the satellite view options is, your graphic card is in the browsers blacklist.&lt;/p&gt;
&lt;p&gt;To force enabling &lt;a href="https://en.wikipedia.org/wiki/WebGL"&gt;WebGL&lt;/a&gt; in the browser start it with the following options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chromium-browser --enable-webgl --ignore-gpu-blacklist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can use Google Earth in &lt;a href="https://maps.google.com"&gt;maps.google.com&lt;/a&gt;.&lt;/p&gt;</summary><category term="chromium"></category><category term="howto"></category><category term="maps"></category></entry><entry><title>Vagrant, development environments made easy</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-25-vagrant.html" rel="alternate"></link><published>2014-05-25T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-25:/posts/2014/2014-05-25-vagrant.html/</id><summary type="html">&lt;p&gt;Prototyping and testing configurations and system installations is time consuming on traditional hardware. That is why I started using Vagrant for nearly all development, prototyping and testing. It's free and really easy to use. If you install &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; &lt;code&gt;sudo apt-get install virtualbox&lt;/code&gt; first, you'll be up and running in no time.&lt;/p&gt;
&lt;p&gt;Vagrant do profile itself for developers, but &lt;a href="https://en.wikipedia.org/wiki/Sysadmin" title="System administrator"&gt;sysadmin&lt;/a&gt;s has much to gain by using such tools to make life easier for themselves. Automation and reproducibility is key concepts in modern system administration. We need to think more and more like developers, as much as developers need to think more and more like &lt;a href="https://en.wikipedia.org/wiki/Sysadmin" title="System administrator"&gt;sysadmin&lt;/a&gt;s.&lt;/p&gt;
&lt;p&gt;Excerpt: &lt;em&gt;Create and configure lightweight, reproducible, and portable development environments.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="vagrant"></category><category term="virtualbox"></category></entry><entry><title>Only Firefox is safe post Heartblead</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-12-revocation.html" rel="alternate"></link><published>2014-05-12T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-12:/posts/2014/2014-05-12-revocation.html/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Steve_Gibson_%28computer_programmer%29"&gt;Steve Gibson&lt;/a&gt; have a nice round-up where he explains how certificate revocation does work and why Chrome and Chromiums certificate revocation scheme doesn't work. I recommend to read both &lt;a href="https://en.wikipedia.org/wiki/Steve_Gibson_%28computer_programmer%29"&gt;Steve Gibson&lt;/a&gt;'s article on &lt;a href="https://www.grc.com/revocation/crlsets.htm"&gt;An Evaluation of the Effectiveness of Chrome's CRLSets&lt;/a&gt; and Adam Langley's in my opinion a bit missplaced answer &lt;a href="https://www.imperialviolet.org/2014/04/29/revocationagain.html"&gt;Revocation still doesn't work&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.grc.com/revocation.htm"&gt;Security Certificate - Revocation Awareness Test&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Listen to &lt;a href="https://www.grc.com/securitynow.htm"&gt;Security Now!&lt;/a&gt; episode 454 &lt;a href="https://www.grc.com/securitynow.htm#454"&gt;Certificate Revocation Part 2&lt;/a&gt; in which Steve explains about both certificate revocation and Google's CRLSets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to be safe&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use Firefox until Chrome is fixed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Firefox enable hard fail on &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; errors. &lt;/p&gt;
&lt;p&gt;Goto &lt;strong&gt;Preferences&lt;/strong&gt; → &lt;strong&gt;Advanced&lt;/strong&gt; → &lt;strong&gt;Certificates&lt;/strong&gt; → &lt;strong&gt;Validation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Check &lt;strong&gt;When an OSCP server connection failes, treat the certificate as invalid.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="chrome"></category><category term="firefox"></category><category term="security"></category><category term="ssl"></category></entry><entry><title>Flashing a custom rom on Nexus 4</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-11-rootnexus.html" rel="alternate"></link><published>2014-05-11T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-11:/posts/2014/2014-05-11-rootnexus.html/</id><summary type="html">&lt;p&gt;Flashing a custom image on an &lt;a href="https://en.wikipedia.org/wiki/Android_%28operating_system%29" title="Android operating system"&gt;Android&lt;/a&gt; mobile could be just fun. But if you don't know why you want to do it, or do it just because it's a challenge. &lt;strong&gt;Then don't!&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;The bad and the good&lt;/h2&gt;
&lt;p&gt;I'm only pointing out some of the cons and the pros here.&lt;/p&gt;
&lt;h3&gt;Negative sides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An OS image could contain &lt;a href="https://en.wikipedia.org/wiki/Malware" title="Malware"&gt;malware&lt;/a&gt;; only use community trusted images.&lt;/li&gt;
&lt;li&gt;If you don't pay attention you can get &lt;a href="https://en.wikipedia.org/wiki/Malware" title="Malware"&gt;malware&lt;/a&gt; running as root. That's B A D !&lt;/li&gt;
&lt;li&gt;May not have all the phones vendor functionality. &lt;/li&gt;
&lt;li&gt;The image may be buggy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Consequences of a buggy image&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lock up your phone when you least expect it.&lt;/li&gt;
&lt;li&gt;Drain the battery quicker. &lt;/li&gt;
&lt;li&gt;Suddenly reboot.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Positive sides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can get a newer more secure operating system.&lt;/li&gt;
&lt;li&gt;Use less battery.&lt;/li&gt;
&lt;li&gt;No &lt;a href="https://en.wikipedia.org/wiki/Crapware" title="Pre-installed software"&gt;crapware&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Extra security functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flashing CyanogenMod&lt;/h2&gt;
&lt;p&gt;One of the custom &lt;a href="https://en.wikipedia.org/wiki/Android_%28operating_system%29" title="Android operating system"&gt;Android&lt;/a&gt; images based on &lt;a href="https://source.android.com" title="Android Open Source Project"&gt;AOSP&lt;/a&gt; is &lt;a href="http://www.cyanogenmod.org"&gt;CyanogenMod&lt;/a&gt;. As I know, it's one of the more used ones. Quite stable if you keep away from the &lt;a href="https://en.wikipedia.org/wiki/Nightlies" title="Neutral build"&gt;nightlies&lt;/a&gt; and rich on functionality but not bloated.&lt;/p&gt;
&lt;h3&gt;Preparations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href="https://developer.android.com/tools/help/adb.html" title="Android Debug Bridge"&gt;adb&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Android_software_development#Fastboot" title="Fastboot"&gt;fastboot&lt;/a&gt; to help manage your Nexus phone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install android-tools-adb android-tools-fastboot
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download custom a recovery image. Personally I prefer &lt;a href="http://www.clockworkmod.com"&gt;ClockworkMod&lt;/a&gt; and the touch recovery. Note, this image is compiled for the Nexus 4 phone. Other phones use other images.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://download2.clockworkmod.com/recoveries/recovery-clockwork-touch-6.0.4.7-mako.img
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the latest M snapshot from &lt;a href="http://www.cyanogenmod.org"&gt;CyanogenMod&lt;/a&gt; on &lt;a href="http://download.cyanogenmod.org"&gt;download.cyanogenmod.org&lt;/a&gt;. The model name for Nexus 4 is &lt;em&gt;mako&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://download.cyanogenmod.org/get …&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="android"></category><category term="cyanogenmod"></category><category term="firmware"></category><category term="howto"></category></entry><entry><title>OCSP Stapling on Apache</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-04-ocsp.html" rel="alternate"></link><published>2014-05-04T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-04:/posts/2014/2014-05-04-ocsp.html/</id><summary type="html">&lt;p&gt;Excerpt from Remy van Elsts tutorial: &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; stapling is an enhancement to the standard &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; protocol that delivers &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; responses from the server with the certificate, eliminating the need for relying parties (web users) to check &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; responses with the issuing &lt;a href="https://en.wikipedia.org/wiki/Certificate_Authority" title="Certificate authority"&gt;CA&lt;/a&gt;. This has the effect of reducing bandwidth, improving perceived site performance, and increasing security for everyone involved in establishing the secure session. This tutorial shows you how to set it up with &lt;a href="http://httpd.apache.org"&gt;Apache&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read full tutorial on &lt;a href="https://raymii.org/s/tutorials/OCSP_Stapling_on_Apache2.html"&gt;OCSP Stapling on Apache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Create &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; stapling configuration for &lt;a href="http://httpd.apache.org"&gt;Apache&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt; /etc/apache2/conf-available/sslstapeling.conf&lt;/span&gt;
&lt;span class="s"&gt;SSLUseStapling on&lt;/span&gt;
&lt;span class="s"&gt;SSLStaplingCache &amp;quot;shmcb:logs/stapling-cache(150000)&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;SSLStaplingResponseMaxAge 900&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable configuration, test it and do a restart of &lt;a href="http://httpd.apache.org"&gt;Apache&lt;/a&gt; if all is OK.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a2enconf sslstapeling
apache2ctl configtest
apache2ctl restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check &lt;a href="https://en.wikipedia.org/wiki/OCSP" title="Online Certificate Status Protocol"&gt;OCSP&lt;/a&gt; with &lt;a href="https://www.openssl.org"&gt;OpenSSL&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl s_client -connect «yoursite»:443 -tls1 -tlsextdebug -status
&lt;/pre&gt;&lt;/div&gt;</summary><category term="apache"></category><category term="security"></category><category term="ssl"></category></entry><entry><title>How to get A+ on SSL Labs</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-03-ssl.html" rel="alternate"></link><published>2014-05-03T22:00:00+02:00</published><updated>2015-01-10T00:00:00+01:00</updated><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-03:/posts/2014/2014-05-03-ssl.html/</id><summary type="html">&lt;p&gt;This will show how to get A+ on &lt;a href="https://www.ssllabs.com/ssltest"&gt;SSL Server Test&lt;/a&gt; from &lt;a href="https://www.ssllabs.com"&gt;Qualys SSL Labs&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Enable &lt;a href="https://httpd.apache.org/docs/current/mod/mod_ssl.html"&gt;SSL&lt;/a&gt; and &lt;a href="https://httpd.apache.org/docs/current/mod/mod_headers.html"&gt;headers&lt;/a&gt; module in &lt;a href="https://httpd.apache.org/docs"&gt;Apache2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;a2enmod ssl &lt;/span&gt;
&lt;span class="go"&gt;a2enmod headers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit Apache configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;SSLCertificateFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/crt/&lt;/span&gt;«yourcert».pem
&lt;span class="nb"&gt;SSLCertificateKeyFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/crt/&lt;/span&gt;«yourkey».pem
&lt;span class="nb"&gt;SSLCertificateChainFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/crt/&lt;/span&gt;«intermediatechain».pem

&lt;span class="nb"&gt;Header&lt;/span&gt; always set Strict-Transport-Security &lt;span class="s2"&gt;&amp;quot;max-age=31536000; includeSubDomains&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;SSLEngine&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;SSLProtocol&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; -SSLv2 -SSLv3
&lt;span class="nb"&gt;SSLHonorCipherOrder&lt;/span&gt; &lt;span class="k"&gt;On&lt;/span&gt;
&lt;span class="nb"&gt;SSLCipherSuite&lt;/span&gt; EECDH:EDH:AES:!aNULL:!eNULL:!LOW:!RC4:!3DES:!DES:!MD5:!EXP:!PSK:!SRP:!DSS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;!&lt;/strong&gt; preceding the cipher means that Apache will not use that cipher.&lt;/p&gt;
&lt;h2&gt;View ciphers&lt;/h2&gt;
&lt;p&gt;List the ciphers openssl supports with the current configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl ciphers -v -ssl3 -tls1 &lt;span class="s1"&gt;&amp;#39;EECDH:EDH:AES:!aNULL:!eNULL:!LOW:!RC4:!3DES:!DES:!MD5:!EXP:!PSK:!SRP:!DSS&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;p&gt;With this configuration Apache will prefer &lt;a href="https://en.wikipedia.org/wiki/Perfect_forward_secrecy"&gt;Perfect forward secrecy&lt;/a&gt;. If &lt;a href="https://en.wikipedia.org/wiki/Perfect_forward_secrecy"&gt;Perfect forward secrecy&lt;/a&gt; can't be negotiated it will default to &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES&lt;/a&gt; cipher. This configuration will work on all newer browser. Exceptions are older &lt;a href="https://en.wikipedia.org/wiki/Internet_explorer"&gt;IE&lt;/a&gt;, older Java and a few bots. &lt;/p&gt;
&lt;p&gt;Where there are no links to the information source it's taken from the &lt;a href="https://www.openssl.org/docs/apps/ciphers.html"&gt;documentation&lt;/a&gt; on &lt;a href="https://www.openssl.org"&gt;openssl.org&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Header always set Strict-Transport-Security&lt;/h4&gt;
&lt;p&gt;Force browser to use &lt;a href="https://en.wikipedia.org/wiki/Https"&gt;HTTPS&lt;/a&gt; even if the user enters &lt;a href="https://en.wikipedia.org/wiki/Http"&gt;HTTP&lt;/a&gt;. The browser should remember this setting for a really long time, example a year.&lt;/p&gt;
&lt;h4&gt;SSLHonorCipherOrder On&lt;/h4&gt;
&lt;p&gt;Use the servers preferred encryption not the browsers which may be a weaker cipher.&lt;/p&gt;
&lt;h4&gt;EECDH&lt;/h4&gt;
&lt;p&gt;Ephemeral elliptic-curve Diffie-Hellman, see &lt;a href="https://en.wikipedia.org/wiki/ECDH"&gt;ECDH&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;EDH&lt;/h4&gt;
&lt;p&gt;Ephemeral Diffie-Hellman, see &lt;a href="https://en.wikipedia.org/wiki/Diffie-Helmann"&gt;Diffie–Hellman key exchange&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;AES&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;Advanced Encryption Standard&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;!aNULL&lt;/h4&gt;
&lt;p&gt;The cipher suites offering no authentication. This is currently …&lt;/p&gt;</summary><category term="apache"></category><category term="howto"></category><category term="security"></category><category term="ssl"></category></entry><entry><title>reStructuredText cheat sheet</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-03-rst.html" rel="alternate"></link><published>2014-05-03T21:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-03:/posts/2014/2014-05-03-rst.html/</id><summary type="html">&lt;p class="first last"&gt;My cheat sheet for &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;reStructuredText&lt;/a&gt; syntax with examples how it will look after parsing. &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;reStructuredText&lt;/a&gt; is an alternative for &lt;a class="reference external" href="http://daringfireball.net/projects/markdown"&gt;Markedown&lt;/a&gt;.&lt;/p&gt;
</summary><category term="cheatsheet"></category><category term="pelican"></category></entry><entry><title>Auto generate Pelican blog from Dropbox</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-03-dropbox.html" rel="alternate"></link><published>2014-05-03T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-03:/posts/2014/2014-05-03-dropbox.html/</id><summary type="html">&lt;p&gt;This is my notes for how to update my &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; blog automaticlly when I write new posts. See &lt;a href="2014-04-12-pelican"&gt;Creating a blog based on Pelican&lt;/a&gt; for getting started with &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; blog engine.&lt;/p&gt;
&lt;p&gt;A way to be able to blog from anywhere is to use &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; as repository for the your blog. Then let &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; auto regenerate the blog on changes in the &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;A prerequest for this recipe is that &lt;code&gt;/var/www&lt;/code&gt; is not directly exposed to the web.&lt;/p&gt;
&lt;h2&gt;Preparing Dropbox&lt;/h2&gt;
&lt;p&gt;First create a new &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; account and create a &lt;code&gt;Pelican&lt;/code&gt; folder. Share this folder with your main &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; account. Now copy the sources for your &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; blog into the the shared folder.&lt;/p&gt;
&lt;p&gt;On your web server, install &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; under the &lt;code&gt;www-data&lt;/code&gt; user. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -O - &lt;span class="s2"&gt;&amp;quot;https://www.dropbox.com/download?plat=lnx.x86_64&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tar xzf -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then link up the new &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; account to the web server by accessing the link you get from starting the &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/.dropbox-dist/dropboxd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit crontab for &lt;code&gt;www-data&lt;/code&gt;, &lt;code&gt;crontab -e&lt;/code&gt;, to start &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; daemon if it's not running. useful when the server reboots.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*/5 * * * * pgrep -F ~/.dropbox/dropbox.pid &amp;gt;/dev/null || (~/.dropbox-dist/dropboxd &amp;amp;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; should be in sync and have your latest source for the blog.&lt;/p&gt;
&lt;h2&gt;Autogenerate blog on change&lt;/h2&gt;
&lt;p&gt;We need to install &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; blog engine and &lt;a href="http://inotify.aiken.cz/?section=incron&amp;amp;page=about&amp;amp;lang=en"&gt;incron&lt;/a&gt; to trigger auto generation of the blog on changes in the &lt;code&gt;~/Dropbox/Pelican/content&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-pelican python-markdown incron
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;DROPBOX_DIR&lt;/code&gt; the the &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; &lt;code&gt;Makefile&lt;/code&gt; to point to the &lt;a href="https://en.wikipedia.org/wiki/Virtual_hosting" title="Virtual hosting"&gt;VirtualHost&lt;/a&gt; which stores …&lt;/p&gt;</summary><category term="dropbox"></category><category term="howto"></category><category term="incron"></category><category term="pelican"></category></entry><entry><title>Configuring OpenVPN server on RTN66U</title><link href="http://blog.heimsbakk.net/posts/2014/2014-05-01-easyrsa.html" rel="alternate"></link><published>2014-05-01T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-05-01:/posts/2014/2014-05-01-easyrsa.html/</id><summary type="html">&lt;p&gt;The router firmware Tomato, see previous post &lt;a href="2014-04-17-tomato"&gt;RT-N66u with Tomato by Shibby firmware&lt;/a&gt;, can act as an &lt;a href="https://en.wikipedia.org/wiki/OpenVPN" title="OpenVPN"&gt;OpenVPN&lt;/a&gt; server.&lt;/p&gt;
&lt;p&gt;Using open &lt;a href="https://en.wikipedia.org/wiki/Wifi" title="Wi-Fi"&gt;Wi-Fi&lt;/a&gt; access points can be very useful and necessary, but it is inherently insecure. Using the router as an &lt;a href="https://en.wikipedia.org/wiki/OpenVPN" title="OpenVPN"&gt;OpenVPN&lt;/a&gt; server can increase your privacy and security when you are on the go. By creating an encrypted &lt;a href="https://en.wikipedia.org/wiki/Vpn" title="Virtual Private Network"&gt;VPN&lt;/a&gt; connection back home to the router, you don't only get protection from nosy eavesdroppers but you get access to all your equipment behind the router at home as well.&lt;/p&gt;
&lt;p&gt;For &lt;a href="https://en.wikipedia.org/wiki/OpenVPN" title="OpenVPN"&gt;OpenVPN&lt;/a&gt; to work we need to create our own &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority" title="Certificate Authority"&gt;CA&lt;/a&gt; for signing both server, the router, and optionally client certificates. This notes will only show how to create a server certificate and configure the router with user name and password authentication.&lt;/p&gt;
&lt;h2&gt;Preparations, create CA&lt;/h2&gt;
&lt;p&gt;Install necessary software. Although haveged, is not required, see &lt;a href="2014-04-29-haveged"&gt;Better entropy with haveged&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install easy-rsa haveged
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a work directory for &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority" title="Certificate Authority"&gt;OpenVPN&lt;/a&gt;. Take care to protect this directory and the files under it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make-cadir «yourdomain»
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority" title="Certificate Authority"&gt;CA&lt;/a&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; «yourdomain»
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit the &lt;code&gt;vars&lt;/code&gt; file and change the following variables to something more sensible for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KEY_COUNTRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KEY_PROVINCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CA&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KEY_CITY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SanFrancisco&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KEY_ORG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Funston-Fort&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;KEY_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;me@myhost.mydomain&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Source the variables into current bash session.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./vars
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do a initial clean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./clean-all 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create your &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority" title="Certificate Authority"&gt;CA&lt;/a&gt; public and private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./build-ca
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate your &lt;a href="https://en.wikipedia.org/wiki/Diffie-Helmann" title="Diffie–Hellman key exchange"&gt;Diffie–Hellman&lt;/a&gt; parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./build-dh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create your routers public and private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./build-key-server «yourrouter»
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Listing of folder &lt;code&gt;keys&lt;/code&gt; should …&lt;/p&gt;</summary><category term="howto"></category><category term="tomato"></category><category term="network"></category><category term="openvpn"></category><category term="security"></category><category term="vpn"></category></entry><entry><title>Better entropy with haveged</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-29-haveged.html" rel="alternate"></link><published>2014-04-29T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-29:/posts/2014/2014-04-29-haveged.html/</id><summary type="html">&lt;p&gt;Entropy is important for generating good encryption keys. Do you have a busy server relying on crypto, generating keys, you need lot of good entropy. Or if you have a disk less system you don't get as much entropy from the kernel that you may wish. One way to get a lot of good entropy is to use haveged. Haveged is closer to a &lt;a href="https://en.wikipedia.org/wiki/TRNG" title="True Random Number Generator"&gt;TRNG&lt;/a&gt; than a &lt;a href="https://en.wikipedia.org/wiki/PRNG" title="PseudoRandom Number Generator"&gt;PRNG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Excerpt from havegeds homepage: &lt;em&gt;The haveged project is an attempt to provide an easy-to-use, unpredictable random number generator based upon an adaptation of the HAVEGE algorithm. Haveged was created to remedy low-entropy conditions in the Linux random device that can occur under some workloads, especially on headless servers. Current development of haveged is directed towards improving overall reliablity and adaptability while minimizing the barriers to using haveged for other tasks.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.issihosts.com/haveged"&gt;haveged - A simple entropy daemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to install&lt;/h2&gt;
&lt;p&gt;Install haveged from the repository - and that's it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install haveged
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enjoy fast good entropy. Check your entropy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/sys/kernel/random/entropy_avail
&lt;/pre&gt;&lt;/div&gt;</summary><category term="entropy"></category><category term="howto"></category><category term="security"></category><category term="trng"></category></entry><entry><title>RT-N66u with Tomato by Shibby firmware</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-17-tomato.html" rel="alternate"></link><published>2014-04-17T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-17:/posts/2014/2014-04-17-tomato.html/</id><summary type="html">&lt;p&gt;&lt;em&gt;This is a part of my personal notes. Use this information at your own risk. If you are uncertain or don't know what you are doing. Do not proceed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Asus &lt;a href="http://www.asus.com/Networking/RTN66U"&gt;RT-N66U&lt;/a&gt; is a Linux based wireless router. The stock firmware can be a bit limiting for the more advanced user. If you want better &lt;a href="http://en.wikipedia.org/wiki/Quality_of_service" title="Quality of service"&gt;QoS&lt;/a&gt;, &lt;a href="http://openvpn.net"&gt;OpenVPN&lt;/a&gt; or just more control over the network I recommend installing &lt;a href="http://tomato.groov.pl"&gt;Tomato by Shibby&lt;/a&gt; firmware.&lt;/p&gt;
&lt;p&gt;Download the latest version of the firmware from &lt;a href="http://tomato.groov.pl"&gt;Tomato by Shibby&lt;/a&gt;. Look for &lt;code&gt;Asus RT-N66u 64k&lt;/code&gt; in the version folder in &lt;a href="http://tomato.groov.pl/download/K26RT-N"&gt;K26RT-N&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;I use the all in one, AIO, i.e. &lt;code&gt;tomato-K26USB-1.28.RT-N5x-MIPSR2-117-AIO-64K.trx&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Flash RT-N66u&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download latest &lt;a href="http://tomato.groov.pl"&gt;Tomato by Shibby&lt;/a&gt;, e.g. &lt;a href="http://tomato.groov.pl/download/K26RT-N/build5x-117-EN/Asus%20RT-N66u%2064k/tomato-K26USB-1.28.RT-N5x-MIPSR2-117-AIO-64K.trx"&gt;tomato-K26USB-1.28.RT-N5x-MIPSR2-117-AIO-64K.trx&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Connect the router to a computer with cable.&lt;/li&gt;
&lt;li&gt;Turn off router.e&lt;/li&gt;
&lt;li&gt;Turn on route while holding in reset button. Wait until the power LED starts blinking. The router is in flash mode.&lt;/li&gt;
&lt;li&gt;Configure the network opn the computer to &lt;code&gt;192.168.1.2/255.255.255.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Browse to &lt;a href="http://192.168.1.1"&gt;http://192.168.1.1&lt;/a&gt;, erase &lt;a href="http://en.wikipedia.org/wiki/Non-volatile_random-access_memory" title="Non-volatile random-access memory"&gt;NVRAM&lt;/a&gt; and upload the new firmware.&lt;/li&gt;
&lt;li&gt;This takes some time. &lt;/li&gt;
&lt;li&gt;Configure network on computer to DHCP and wait until it receives a address. &lt;/li&gt;
&lt;li&gt;Browse to &lt;a href="http://192.168.1.1"&gt;http://192.168.1.1&lt;/a&gt; and start configuring the router.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Tips&lt;/h3&gt;
&lt;p&gt;Problems booting. Try to reset &lt;a href="http://en.wikipedia.org/wiki/Non-volatile_random-access_memory" title="Non-volatile random-access memory"&gt;NVRAM&lt;/a&gt; again. Resetting &lt;a href="http://en.wikipedia.org/wiki/Non-volatile_random-access_memory" title="Non-volatile random-access memory"&gt;NVRAM&lt;/a&gt; can also be done by holding in WPS button while powering on. Don't release WPS button before 30 seconds. &lt;/p&gt;</summary><category term="firmware"></category><category term="howto"></category><category term="network"></category><category term="tomato"></category></entry><entry><title>SSL Server Test</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-ssllabs.html" rel="alternate"></link><published>2014-04-13T22:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-ssllabs.html/</id><summary type="html">&lt;p&gt;Run &lt;a href="https://www.ssllabs.com"&gt;Qualys SSL Labs&lt;/a&gt; test to test the strength and combability of SSL certificate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ssllabs.com/ssltest"&gt;SSL Server Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="security"></category><category term="ssl"></category></entry><entry><title>Find duplicate files</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-duplicates.html" rel="alternate"></link><published>2014-04-13T21:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-duplicates.html/</id><summary type="html">&lt;p&gt;Find all duplicate files in current and sub-directories with bash. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find -not -empty -type f -printf &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -rn &lt;span class="p"&gt;|&lt;/span&gt; uniq -d &lt;span class="p"&gt;|&lt;/span&gt; xargs -I&lt;span class="o"&gt;{}&lt;/span&gt; -n1 find -type f -size &lt;span class="o"&gt;{}&lt;/span&gt;c -print0 &lt;span class="p"&gt;|&lt;/span&gt; xargs -0 md5sum &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -w32 --all-repeated&lt;span class="o"&gt;=&lt;/span&gt;separate
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Breakdown&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Find all non empty files and print out size.&lt;/li&gt;
&lt;li&gt;Do a numeric sort on size list.&lt;/li&gt;
&lt;li&gt;Print out only duplicate sizes.&lt;/li&gt;
&lt;li&gt;One at a time run find on size and print file names.&lt;/li&gt;
&lt;li&gt;Find md5sum of all files.&lt;/li&gt;
&lt;li&gt;Alphabetical sort md5sums and file names.&lt;/li&gt;
&lt;li&gt;Find all md5sums which repeats and print them in groups. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Alternatively&lt;/h2&gt;
&lt;p&gt;Or do it the easy way and install a tool for finding duplicates files. This tool is much faster than the oneliner above. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install fdupes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does more or less the same thing as the oneliner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdupes -r .
&lt;/pre&gt;&lt;/div&gt;</summary><category term="bash"></category><category term="oneliner"></category></entry><entry><title>Cloud virtual machine</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-digitalocean.html" rel="alternate"></link><published>2014-04-13T17:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-digitalocean.html/</id><summary type="html">&lt;p&gt;Easiest way I know to create cloud virtual machine is to create a Droplet on Digital Ocean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/?refcode=2c2348527899"&gt;DigialOcean&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;</summary><category term="cloud"></category><category term="vm"></category></entry><entry><title>Remove unused kernels</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-kernel.html" rel="alternate"></link><published>2014-04-13T16:45:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-kernel.html/</id><summary type="html">&lt;p&gt;Removes all but current kernel and headers. This is a note for personal use. Use at your own risk :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg-query -f &lt;span class="s1"&gt;&amp;#39;${Package}\n&amp;#39;&lt;/span&gt; -W &lt;span class="p"&gt;|&lt;/span&gt;  egrep &lt;span class="s1"&gt;&amp;#39;linux-(headers|image)-[[:digit:]].*(|-generic)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="k"&gt;$(&lt;/span&gt;uname -r &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/-generic//&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs apt-get -q -q -yy --purge remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Breakdown&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;List all packages.&lt;/li&gt;
&lt;li&gt;Find only linux-image and linux-header packages with version number, not the two main meta packages.&lt;/li&gt;
&lt;li&gt;Remove the linux-image and linux-header for running kernel from the list.&lt;/li&gt;
&lt;li&gt;Purge all listed packages from system without asking any questions.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="bash"></category><category term="oneliner"></category><category term="ubuntu"></category><category term="kernel"></category></entry><entry><title>Modeline in vim</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-modeline.html" rel="alternate"></link><published>2014-04-13T16:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-modeline.html/</id><summary type="html">&lt;p&gt;Options set in &lt;code&gt;.vimrc&lt;/code&gt; applies to all vim files. You can use modelines to set specific vim options for one file. Modeline option must be set in &lt;code&gt;.vimrc&lt;/code&gt; to take advantage of this option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;modeline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The modeline should be the first line in the file. You can set it inn multiple ways as shown below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vim: set ai et ts=4 sts=4 sw=4 tw=79 cc=80 wrap wb nu sm:
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* vim: set enc=UTF-8 ai et ts=4 sts=4 sw=4 tw=79 cc=80 wrap wb nu sm: */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// vim: set enc=UTF-8 ai et ts=4 sts=4 sw=4 tw=79 cc=80 wrap wb nu sm: 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enc=UTF-8&lt;/code&gt;&lt;br&gt;
    Set encoding to UTF-8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ai&lt;/code&gt;&lt;br&gt;
    Auto intend&lt;/li&gt;
&lt;li&gt;&lt;code&gt;et&lt;/code&gt;&lt;br&gt;
    Expand tabs with spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts=4&lt;/code&gt;&lt;br&gt;
    Tab stop set to 8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sts=4&lt;/code&gt;&lt;br&gt;
    Soft tab stop&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sw=4&lt;/code&gt;&lt;br&gt;
    Shift width, used by &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tw=79&lt;/code&gt;&lt;br&gt;
    Text width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cc=80&lt;/code&gt;&lt;br&gt;
    Set colour column, a colour bare at character 80&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt;&lt;br&gt;
    Wraps text, only affects how the text is displayed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wb&lt;/code&gt;&lt;br&gt;
    Write a backup before saving files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nu&lt;/code&gt;&lt;br&gt;
    Show line numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sm&lt;/code&gt;&lt;br&gt;
    Show matching brackets &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;More information in the Vim &lt;a href="http://vimdoc.sourceforge.net/htmldoc"&gt;documentations&lt;/a&gt; under &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html"&gt;options&lt;/a&gt;.&lt;/p&gt;</summary><category term="howto"></category><category term="vim"></category></entry><entry><title>Bash getopts example</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-13-getopts.html" rel="alternate"></link><published>2014-04-13T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-13:/posts/2014/2014-04-13-getopts.html/</id><summary type="html">&lt;p&gt;This is a small example how to use getopts in bash. I wrote it down for my own sake, as my own cheatsheet :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Print help on stderr&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; show_help&lt;span class="o"&gt;(){&lt;/span&gt; 
    show_usage 
    cat &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;

&lt;span class="s"&gt;Explain all about $(basename $0) here.&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Print usage on stderr&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; show_usage&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; [-a ARG] [-b] [N1 [N2 .. [NN]]]&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Print usage and exit with error code 1 if we don&amp;#39;t have any options&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    show_usage
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# :  = make getopts silent, handle errors self&lt;/span&gt;
&lt;span class="c1"&gt;# a: = option a expects an argument&lt;/span&gt;
&lt;span class="c1"&gt;# b  = option b is a true false option&lt;/span&gt;
&lt;span class="c1"&gt;# h  = option h is a true false option&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# On invalid option, opt will be replaced with ? &lt;/span&gt;
&lt;span class="c1"&gt;# and OPTARG set to argument name&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:a:bh&amp;quot;&lt;/span&gt; opt
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$opt&lt;/span&gt; in
        a&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
        b&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; True&lt;span class="p"&gt;;;&lt;/span&gt;
        h&lt;span class="o"&gt;)&lt;/span&gt;  show_help&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; invalid option: -&lt;span class="nv"&gt;$OPTARG&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# OPTIND is not reset after getopts is finished. &lt;/span&gt;
&lt;span class="c1"&gt;# Loop through argument  [N1 [N2 .. [NN]]] &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; ARG in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@:&lt;/span&gt;&lt;span class="nv"&gt;$OPTIND&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ARG&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="howto"></category><category term="bash"></category></entry><entry><title>Scaling in the Linux Networking Stack</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-12-link.html" rel="alternate"></link><published>2014-04-12T16:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-12:/posts/2014/2014-04-12-link.html/</id><summary type="html">&lt;p&gt;Documentation for increaseing parallelism and performance for multi-processor systems. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/torvalds/linux/blob/master/Documentation/networking/scaling.txt"&gt;scaling.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="network"></category><category term="tuning"></category></entry><entry><title>Creating a blog based on Pelican</title><link href="http://blog.heimsbakk.net/posts/2014/2014-04-12-pelican.html" rel="alternate"></link><published>2014-04-12T00:00:00+02:00</published><author><name>arnulf</name></author><id>tag:blog.heimsbakk.net,2014-04-12:/posts/2014/2014-04-12-pelican.html/</id><summary type="html">&lt;p&gt;&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; is a static website generator written in Python. It's perfect for maintaining a tiny blog without having to mess around with databases. Static pages can be served from any Web server. Even your wireless router if you run custom firmware as &lt;a href="http://tomato.groov.pl"&gt;Tomato by Shibby&lt;/a&gt; or &lt;a href="http://www.dd-wrt.com"&gt;dd-wrt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Running Ubuntu Trusty I chose to use Pelican package in repository. A very quick recipe for creating a blog with the default theme.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Pelican and package for &lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; language. With Markdown you write the content in text and Pelican translates it to HTML.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install python-pelican python-markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a directory where you want to maintain your blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myblock; cd myblock
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the Pelican quick start script and answer all the questions. Add at least one method of uploading your blog to a web server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start by creating your first page in &lt;code&gt;content&lt;/code&gt; directory. Each page should have a heading with some metadata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;howto&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arnulf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the local HTTP server and check how your blog is coming along.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point your browser to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upload your blog to your web server. I prefer the ssh upload option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make ssh_upload
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A more lengthy and better &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html"&gt;getting started guide&lt;/a&gt; on getpelican.com. I did find adam-p's &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet&lt;/a&gt; on &lt;a href="https://github.com"&gt;github&lt;/a&gt; quite useful. And not to forget all the themes you can &lt;a href="https://github.com/getpelican/pelican-themes"&gt;download&lt;/a&gt; from &lt;a href="https://github.com"&gt;github&lt;/a&gt;.&lt;/p&gt;</summary><category term="howto"></category><category term="pelican"></category></entry></feed>